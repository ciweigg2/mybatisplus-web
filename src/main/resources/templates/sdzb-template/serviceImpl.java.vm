package ${package.Service}.impl;

import com.easy521.base.mapper.BaseMapper;
import com.easy521.base.service.impl.BaseServiceImpl;
import lombok.extern.slf4j.Slf4j;
import ${package.Mapper}.${table.mapperName};
import ${package.Entity}.${entity};
import ${package.Entity}.${entity}Example;
import ${package.Entity}.vo.${entity}Vo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * @author ${author}
 * @date ${date}
 * @jdk.version 1.8
 * @desc ${table.comment}接口实现类
 */
@Service
@Slf4j
@Transactional(rollbackFor = Exception.class)
public class ${entity}ServiceImpl extends BaseServiceImpl<${entity}, ${entity}Example, String> implements ${entity}Service {

    #set($lowrEntity = $table.entityName.substring(0,1).toLowerCase() + $table.entityName.substring(1,$table.entityName.length()))

    @Autowired
    private ${entity}Mapper ${lowrEntity}Mapper;


    /**
     * 根据条件查询${table.comment}的列表
     *
     * @param ${lowrEntity} 条件参数
     * @return ${table.comment}列表
     *
     */
    @Override
    public List<${entity}Vo> selectList(${entity} ${lowrEntity}){
        ${entity}Example ${lowrEntity}Example = new ${entity}Example();
        ${entity}Example.Criteria ${lowrEntity}criteria = ${lowrEntity}Example.createCriteria();
        this.selectByExample(${lowrEntity}Example);
        return null;
    }


    /**
     * 新增${table.comment}列表
     *
     * @param ${lowrEntity}List ${table.comment}列表
     * @return 新增的${table.comment}列表
     */
    @Override
    public List<${entity}> addList(List<${entity}> ${lowrEntity}List) {
        for (${entity} ${lowrEntity}:${lowrEntity}List) {
            this.insertSelective(${lowrEntity});
        }
        return ${lowrEntity}List;
    }

    /**
     * 新增${table.comment}
     *
     * @param ${lowrEntity} ${table.comment}
     * @return 新增的${table.comment}
     */
    @Override
    public ${entity} add(${entity} ${lowrEntity}) {
        this.insertSelective(${lowrEntity});
        return ${lowrEntity};
    }

    /**
     * 根据主键修改${table.comment}列表
     *
     * @param ${lowrEntity}List ${table.comment}列表
     * @return 修改后的${table.comment}列表
     */
    @Override
    public List<${entity}> updateList(List<${entity}> ${lowrEntity}List)  {
        for (${entity} ${lowrEntity}:${lowrEntity}List){
            ${entity} ${lowrEntity}Data=this.selectByPrimaryKey(${lowrEntity}.get${entity}Id());
            if(${lowrEntity}Data!=null) {
                this.delete(${lowrEntity}Data);
                this.insertSelective(${lowrEntity});
            }else{
                this.updateByPrimaryKeySelective(${lowrEntity});
            }
        }
        return ${lowrEntity}List;
    }

    /**
     * 根据主键修改${table.comment}
     *
     * @param ${lowrEntity} ${table.comment}
     * @return 修改后的${table.comment}
     */
    @Override
    public ${entity} update(${entity} ${lowrEntity})  {
        this.updateByPrimaryKeySelective(${lowrEntity});
        return ${lowrEntity};
    }

    /**
     * 根据主键删除${table.comment}
     *
     * @param ${lowrEntity} ${table.comment}
     * @return 影响条数
     */
    @Override
    public int delete(${entity} ${lowrEntity}){
        return this.deleteByPrimaryKey(${lowrEntity}.get${entity}Id());
    }

    /**
     * 删除${table.comment}列表
     *
     * @param ${lowrEntity}List ${table.comment}列表
     * @return 删除成功
     */
    @Override
    public int deleteList(List<${entity}> ${lowrEntity}List){
        for (${entity} ${lowrEntity}:${lowrEntity}List) {
            this.deleteByPrimaryKey(${lowrEntity}.get${entity}Id());
        }
        return ${lowrEntity}List.size();
    }

    @Override
    public BaseMapper<${entity}, ${entity}Example, String> getMapper() {
        return ${lowrEntity}Mapper;
    }
	
}
